{"version":3,"sources":["runner.js"],"names":["digitRunner","numberNode","node","placeno","innerHTML","i","num","length","digits","ar","d","number","back","from","calculateStartNum","out","prepareRunningArr","push","newnum","childNodes","k","delay","pause","_loop","runner","RunRunner","els","classList","add","entries","callback","forEach","entry","target","contains","remove","root","options","rootMargin","IntersectionObserver","observer","window","addEventListener"],"mappings":"aACA,SAASA,YAAYC,GA8BjB,IARYC,IAAAA,EAAKC,EAASC,WAAdF,EACI,GADJA,EAH8B,GAWjCG,EAAI,EAAGA,EAAIC,EAAIC,OAAQF,IAV5BG,EAAUH,IAAOC,EAAGG,GAAGF,UAItB,IAAA,IAAAF,EAAA,EAAAA,EAAAG,EAAAD,OAAAF,IAAA,CACJ,IAAAK,EApBG,SAAAC,EAAAC,GAGJ,IAFC,IAPLD,EAAAC,EAOKC,GAPLF,EAOKA,IAPLC,EAOKA,GALQE,GAAAA,EAAkBH,GAA3B,EAEeA,EAASC,EAGvBG,EAIU,GAFFC,EAAAA,EAAAA,EAATJ,EAA2BD,IACvB,IAAQE,IAARA,EAAA,GAKQE,EAAIE,KAAKJ,GAFbA,OAAIE,EAaXC,CAAAR,EAAAH,GAAA,GAUGa,EAAOb,GAAK,GARZC,IAAML,IAAAA,EAAAA,EAAWkB,EAAAA,EAAAA,OAArBC,IACUF,EADVb,GAAAY,KAAAP,EAAAU,IAIIZ,IADJ,IAAKa,EAAL,EACIhB,EAAaC,EAAGD,EAAID,EAAAA,OAApBC,IACHgB,GAAA,IAjBI,SAAAnB,EAAAC,EAAAM,EAAAa,GAKD,IALC,IAKQjB,EAAI,EAAGA,EAAII,EAAGF,OAAQF,KAL9B,SAKQA,GAJFU,WAAP,WACHb,EAAAC,GAAAC,UAAAK,EAAAJ,IAMUiB,EAAQ,GAAKjB,GAHgBkB,CAA3BlB,GAuBTmB,CAAOlB,EAAKD,EAAGa,EAAOb,GAAIgB,GAP1B,SAAKI,YAEJ,IADGP,IAAAA,EAAAA,SAAUD,iBAAV,YACHZ,EAAA,EAAAA,EAAAqB,EAAAnB,OAAAF,IAcPqB,EAAIrB,GAAGsB,UAAUC,IAAI,U,+CAiBtBC,EAAAC,QAAA,SAAAA,GACAD,EAAAE,gBAEAC,EAAAC,OAAAN,UAAAO,SAAA,YAEAF,EAAAC,OAAAN,UAAAQ,OAAA,UACAH,YAAAA,EAAAL,Y,CAXAS,KAAAC,KACAD,WADA,MAEAE,UAAA,KAcCA,EAAAA,SAAYC,iBAAA,Y,mBAFCC,EAAdnC,QAAAA,EAAAqB,IA/BDe,OAAOC,iBAAiB,OAAQjB,WAAW","file":"runner.js","sourcesContent":["// DIGIT RUNNER \r\nfunction digitRunner(numberNode) {\r\n    function calculateStartNum(number, back) {\r\n        if (number < back) {\r\n            return 9 - (back - number) + 1\r\n        }\r\n        return number - back\r\n    }\r\n\r\n    function prepareRunningArr(number, back) {\r\n        var from = calculateStartNum(number, back),\r\n            out = []\r\n        for (var i = 0; i < back; i++) {\r\n            from++\r\n            if (from > 9) from = 0\r\n                out.push(from)\r\n        }\r\n        return out\r\n    }\r\n\r\n    function runner(node, placeno, ar, pause) {\r\n        for (let i = 0; i < ar.length; i++) {\r\n            setTimeout(function () {\r\n                node[placeno].innerHTML = ar[i]\r\n            }, pause + 50 * i);\r\n        }\r\n    }\r\n\r\n    var num = numberNode.childNodes,\r\n        digits = [],\r\n        newnum = []\r\n    for (let i = 0; i < num.length; i++) {\r\n        digits[i] = +num[i].innerHTML\r\n    }\r\n    for (let i = 0; i < digits.length; i++) {\r\n        var d = prepareRunningArr(digits[i], 7)\r\n        newnum[i] = []\r\n        for (let k = 0; k < d.length; k++) {\r\n            newnum[i].push(d[k])\r\n        }\r\n    }\r\n    var delay = 0\r\n    for (let i = 0; i < newnum.length; i++) {\r\n        delay += 250\r\n        runner(num, i, newnum[i], delay)\r\n    }\r\n}\r\n\r\nwindow.addEventListener(\"load\", RunRunner, false);\r\nfunction RunRunner () {\t\r\n\tvar els = document.querySelectorAll('.running')\r\n\tfor (let i = 0; i < els.length; i++) {\r\n\t\t// \tels[i].notEvokedYet = true\r\n\t\tels[i].classList.add('hidden')\r\n\t}\r\n\t// function isElementInViewport(el) {\r\n\t// \tvar rect = el.getBoundingClientRect();\r\n\t// \treturn (\r\n\t// \t\trect.top >= 0 &&\r\n\t// \t\trect.left >= 0 &&\r\n\t// \t\trect.bottom <= ((window.innerHeight || document.documentElement.clientHeight) + 150) &&\r\n\t// \t\trect.right <= (window.innerWidth || document.documentElement.clientWidth)\r\n\t// \t);\r\n\t// }\r\n\r\n\t// function runIfVisible(e) {\r\n\t// \tfor (let i = 0; i < els.length; i++) {\r\n\t// \t\tif (isElementInViewport(els[i])) {\r\n\t// \t\t\tif (els[i].notEvokedYet) {\r\n\t// \t\t\t\tels[i].classList.remove('hidden')\r\n\t// \t\t\t\tdigitRunner(els[i])\r\n\t// \t\t\t\tels[i].notEvokedYet = false\r\n\t// \t\t\t}\r\n\t// \t\t} else els[i].notEvokedYet = true\r\n\t// \t}\r\n\t// }\r\n\t// window.addEventListener(\"scroll\", runIfVisible)\r\n\t\r\n\t// new approach\r\n\tvar options = {\r\n\t\troot: null,\r\n\t\trootMargin: '0px',\r\n\t\tthreshold: 0.2\r\n\t}\r\n\tvar callback = function(entries, observer) { \r\n\t\tentries.forEach(entry => {\r\n\t\t\tif (entry.isIntersecting) {\r\n\t\t\t\t// console.log(entry)\r\n\t\t\t\tif (entry.target.classList.contains('hidden')) {\r\n\t\t\t\t\t// console.log('notevokedyet = true')\r\n\t\t\t\t\tentry.target.classList.remove('hidden')\r\n\t\t\t\t\tdigitRunner(entry.target)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\tvar observer = new IntersectionObserver(callback, options);\r\n\tvar target = document.querySelectorAll('.running');\r\n\tfor (let i = 0; i < els.length; i++) {\r\n\t\tobserver.observe(target[i]);\r\n\t}\r\n}"]}